[tool.poetry]
name = "keyhint"
version = "0.3.0"
description = "Cheat-sheets for shortcuts & commands at your fingertips."
keywords = ["shortcuts", "keybindings", "hints", "helper", "cheatsheet"]
license = "MIT"
authors = ["dynobo <dynobo@mailbox.org>"]
readme = "README.md"
repository = "https://github.com/dynobo/keyhint"
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Topic :: Utilities",
  "Intended Audience :: End Users/Desktop",
  "Operating System :: POSIX :: Linux",
]

[tool.poetry.scripts]
keyhint = "keyhint.app:main"

[tool.poetry.dependencies]
python = "^3.11"
PyGObject = "^3.42.2"
PyYAML = "^6.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.1"
rope = "^1.7.0"
pytest-cov = "^4.0.0"
pre-commit = "^3.0.4"
coveralls = "^3.3.1"
types-PyYAML = "^6.0.12.4"
Nuitka = "^1.4.5"
tbump = "^6.9.0"
ruff = "^0.0.243"
pip-audit = "^2.4.14"
mdformat = "^0.7.16"
mypy = "^1.0.0"
ordered-set = "^4.1.0"
zstandard = "^0.19.0"
viztracer = "^0.15.6"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
files = ["keyhint/**/*.py", "tests/**/*.py"]
ignore_missing_imports = true
follow_imports_for_stubs = true

[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [".venv"]
select = [
  "F",    # Pyflakes
  "E",    # pycodestyle
  "I",    # Isort
  "D",    # pydocstyle
  "W",    # warning
  "UP",   # pyupgrad
  "N",    # pep8-naming
  "C90",  # mccabe
  "TRY",  # tryceratops (exception handling)
  "ANN",  # flake8-annotations
  "S",    # flake8-bandits
  "C4",   # flake8-comprehensions
  "B",    # flake8-bugbear
  "A",    # flake8-builtins
  "ISC",  # flake8-implicit-str-concat
  "ICN",  # flake8-import-conventions
  "T20",  # flake8-print
  "PYI",  # flake8-pyi
  "PT",   # flake8-pytest-style
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "SIM",  # flake8-simplify
  "PTH",  # flake8-use-pathlib
  "G",    # flake8-logging-format
  "PL",   # pylint
  "RUF",  # meta rules (unused noqa)
  "PL",   # meta rules (unused noqa)
  "PERF", # perflint
]
ignore = [
  "D100",   # Missing docstring in public module
  "D101",   # Missing docstring in public class
  "D102",   # Missing docstring in public method
  "D103",   # Missing docstring in public function
  "D104",   # Missing docstring in public package
  "D105",   # Missing docstring in magic method
  "D107",   # Missing docstring in __init__
  "ANN101", # Missing type annotation for `self` in method
  "TRY003", # Avoid specifying long messages outside the exception class
  "ISC001", # Rule conflicts with ruff's formaatter
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "PLR0913", "S101", "TID252", "ANN", "D"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-first-party = ["normcap"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"


[tool.tbump]

[tool.tbump.version]
current = "0.3.0"
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  ((?P<extra>.+))?
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

[[tool.tbump.file]]
src = "pyproject.toml"
search = 'version = "{current_version}"'

[[tool.tbump.file]]
src = "Makefile"
search = "KeyHint-{current_version}"

[[tool.tbump.file]]
src = "keyhint/__init__.py"

[[tool.tbump.file]]
src = "keyhint/resources/window.ui"

[[tool.tbump.before_commit]]
name = "check changelog"
cmd = "grep -q {new_version} CHANGELOG.md"
